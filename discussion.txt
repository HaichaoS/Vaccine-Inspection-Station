Solution 1:
After using LTSA to implement Solution 1 in FSP, a potential deadlock is found. The safe check shows the deadlock happens when two defective vials meet between compartment 3 and the inspection bay because all the compartment, the shuttle, and the bay can only contain 1 vial. However, vials need to use the same shuttle to move between the carousel and the inspection bay. The problem is also found in the Java implementation. To solve this problem during the java implementation, I made the carousel sleep and wait after the scanner detects 1 defective vial. The implementation makes sure only 1 defective vial exists between the carousel and the inspection bay but also decreases the efficiency of the system. By putting the “getback” action after the “puton” action in Solution 1, you can also find the potential deadlock disappears in the FSP model. However, this solution is designed to have a deadlock on purpose, so I leave the deadlock, and it shows the problem as I expected.

Solution 2:
In java implementation, another shuttle is created to move the inspected vial from the inspection bay to another carousel. This improvement avoids 2 vials collide between compartment 3 and the bay. Therefore, additional shuttle and carousel are added to this model to transmit defective vials. Moreover, inspection and putting inspected vials to the additional shuttle was set to have priorities than other actions. It makes sure the inspection bay leaves the place for the following vials sent by the original shuttle. The result shows no deadlock or error was traced, and no progress violation is detected. Therefore, the problem that happened in Solution 1 is solved, and no other problem is found. 

Furthermore, in both 2 solutions, safety properties are implemented to check vials’ movement between different objects. Both properties ensure vials are transmitted between the carousel and the inspection bay safely.
