// Name: Haichao Song
// ID: 854035
// FPS model for Solution 1 

const UNOCCUPIED = 0  // the variable indicates the component carries no vial
const OCCUPIED = 1  // the variable indicates the component carries a vial

const NO_VIAL = 0  // the state when the compartment carries no vial 
const DEF_VIAL = 1  // the state when the compartment carries a defective vial
const UNDEF_VIAL = 2  // the state when the compartment carries an undefective vial

range State = NO_VIAL..UNDEF_VIAL  // the states for compartments of the carousel
range Occupy = UNOCCUPIED..OCCUPIED  // the states for the shuttle and the inspection bay

// the producer has one action insert
PRODUCER = ( insert -> PRODUCER ).

// the consumer has one action remove
CONSUMER = ( remove -> CONSUMER ).

// the scanner has one action scan
SCANNER = ( scan -> SCANNER ).

// the carousel processes 5 compartments
CAROUSEL = CAROUSEL[NO_VIAL][NO_VIAL][NO_VIAL][NO_VIAL][NO_VIAL],
CAROUSEL[s1:State][s2:State][s3:State][s4:State][s5:State] = 
(
	
	// when s1 has no vial, producer can insert defective or undefective vial to the compartment 1
	when (s1 == NO_VIAL) insert -> 
		(
		defective_vial -> CAROUSEL[DEF_VIAL][s2][s3][s4][s5]
		|undefective_vial -> CAROUSEL[UNDEF_VIAL][s2][s3][s4][s5]
		)
	// when s5 has vial, the consumer need to remove the vial
	|when(s5 != NO_VIAL) remove -> CAROUSEL[s1][s2][s3][s4][NO_VIAL]
	// when s3 has vial, it processes scan
	// if it is a defective vial, shuttle put it to inspect and get back later
	// if it is an undefective vial and s5 has no vial, carousel continue rotating
	|when(s3 != NO_VIAL) scan ->
		(
		when(s3 == DEF_VIAL) puton -> CAROUSEL[s1][s2][NO_VIAL][s4][s5]
		|when(s3 != DEF_VIAL) rotate -> CAROUSEL[NO_VIAL][s1][s2][s3][s4]
		)
	|when(s3 == NO_VIAL) getback -> rotate -> CAROUSEL[NO_VIAL][s1][s2][DEF_VIAL][s4]
	// in other situations when carousel has vials on it, it rotates
	|when((s1 != NO_VIAL || s2 != NO_VIAL || s4 != NO_VIAL) && s5 == NO_VIAL) rotate -> CAROUSEL[NO_VIAL][s1][s2][s3][s4]
	
).

// the shuttle has two actions, one get the vial from carousel and put it to the inspection bay
// the other get the vial from the inspection bay and get it to the carousel
SHUTTLE = SHUT[UNOCCUPIED],
SHUT[i:Occupy] = 
(
	when(i == UNOCCUPIED) puton  -> putto -> SHUT[UNOCCUPIED]
	|when(i == UNOCCUPIED) geton -> getback -> SHUT[UNOCCUPIED]
).

// the inspection bay has two states to determine if it is occupied
// it processes the action that inspect the vial and get it back to shuttle
INSPECTIONBAY = INSP[UNOCCUPIED],
INSP[i:Occupy] = 
(
	when(i == UNOCCUPIED) putto -> set_occupied -> addInspectedTagged -> geton -> set_unoccupied -> INSP[UNOCCUPIED]
).

// Synchronized process 
||SIM = ( PRODUCER || CONSUMER || CAROUSEL || SCANNER || SHUTTLE || INSPECTIONBAY ).

// Safety check
// check shuttle moves the vial from the carousel to the inspection bay safely
property SAFE_PUT = ( puton -> putto -> SAFE_PUT ).
// check shuttle moves the vial from the inspection bay to the carousel safely
property SAFE_GET = ( geton -> getback -> SAFE_GET ).

// Synchronized safety check
||SAFE_CHECK = (SIM || SAFE_PUT || SAFE_GET ).